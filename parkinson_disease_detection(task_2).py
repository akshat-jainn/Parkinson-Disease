# -*- coding: utf-8 -*-
"""Parkinson_disease_detection(TASK_2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VYDwEYfeQz-NFIZ6hEaMd6LfqsoAvUK

# **Task 2**

---

## **Submitted By - Akshat Jain**

---


## **Dataset - https://www.kaggle.com/vikasukani/parkinsons-disease-data-set**

---

### **Importing Libraries**

---
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('seaborn')
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.ensemble import RandomForestClassifier
warnings.filterwarnings('ignore' , message  =  'FutureWarning')
from sklearn.metrics import accuracy_score
import pickle

"""### **Loading Data in DataFrame**"""

parkinson_df = pd.read_csv("parkinsons.data")

parkinson_df.head() #to print first five rows

"""### **Exploring Data**"""

parkinson_df.shape #to get rows and columns

"""**This dataset have 195 rows and 24 columns**"""

parkinson_df.info()

parkinson_df.describe()

parkinson_df.isnull().sum()

sns.heatmap(parkinson_df.isnull(), cmap = "viridis")

"""**No Missing values in parkinsons disease dataset**?"""

parkinson_df['status'].value_counts() #to get number of healthy people and people having PD.

sns.countplot(value_count); #visualizing number of healthy people and people with parkinson disease.

precentage_of_people_with_pd = parkinson_df['status'].value_counts()[1] * 100 / parkinson_df.shape[0]
precentage_of_people_with_pd

"""**Number of Healthy people - 48**

**Number of people having Parkinson Disease - 147**

**Almost 75% people have Pd**

### **Dropping columns**
"""

parkinson_df.head()

parkinson_df = parkinson_df.drop("name" , axis = 1)

"""### **Train_test_split**"""

from sklearn.model_selection import train_test_split

X = parkinson_df.drop('status' , axis = 1)
y = parkinson_df.status
print(f'X shape : {X.shape} , y shape : {y.shape}')

X_train , X_test , y_train , y_test = train_test_split(X,y, random_state = 42 , test_size = 0.25) #splitting data for training and testing

"""### **Make predictions**"""



def makeprediction(model1,X_train,X_test,y_train,y_test , dump = 0): #  function to make predictions
  model = model1.fit(X_train,y_train) 
  model_score = model.score(X_train,y_train)
  model_score_test = model.score(X_test , y_test)
  predictions = model.predict(X_test)
  accuracy = accuracy_score(predictions,y_test)
  print(f' model score on train set : {model_score} \n model score on test set : {model_score_test} \n Accuracy score is : {accuracy}')
  sns.distplot(predictions - y_test)
  if dump ==1:
      file = open("model.pkl",'wb')
      pickle.dump(model,file)

model = RandomForestClassifier()  #initalise classifier

makeprediction(model , X_train , X_test,y_train,y_test,1)

"""**By using RandomForestClassifier we get an accuracy score of 93%**"""